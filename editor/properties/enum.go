package properties

import (
	"reflect"

	"github.com/tlyakhov/gofoom/editor/actions"

	"github.com/gotk3/gotk3/glib"
	"github.com/gotk3/gotk3/gtk"
)

func (g *Grid) fieldEnum(index int, field *pgField, enumValues interface{}) {
	// Create our combo box with int/string enum entries.
	rend, _ := gtk.CellRendererTextNew()
	opts, _ := gtk.ListStoreNew(glib.TYPE_INT, glib.TYPE_STRING)
	box, _ := gtk.ComboBoxNewWithModel(opts)
	box.SetHExpand(true)
	box.PackStart(rend, true)
	box.AddAttribute(rend, "text", 1)
	// This is the actual value of this property converted to an int.
	origValue := field.Values[0].Elem().Int()

	// Iterate through all the values of the enum type.
	refEnumValues := reflect.ValueOf(enumValues)
	for i := 0; i < refEnumValues.Len(); i++ {
		listItem := opts.Append()
		enumValue := refEnumValues.Index(i)
		// Our enum should have a String() method generated by the enumer library. Call it.
		enumName := enumValue.MethodByName("String").Call([]reflect.Value{})[0].String()
		// Set the GTK+ list entry.
		opts.Set(listItem, []int{0, 1}, []interface{}{enumValue.Int(), enumName})
		if enumValue.Int() == origValue {
			box.SetActiveIter(listItem)
		}
	}

	box.Connect("changed", func(_ *gtk.ComboBox) {
		selected, _ := box.GetActiveIter()
		value, _ := opts.GetValue(selected, 0)
		value2, _ := value.GoValue()
		action := &actions.SetProperty{IEditor: g.IEditor, Fields: field.Values, ToSet: reflect.ValueOf(value2).Convert(field.Type.Elem())}
		g.NewAction(action)
		action.Act()
	})

	g.Container.Attach(box, 2, index, 1, 1)
}
