// Code generated by "enumer -type=DoorBehavior -json"; DO NOT EDIT.

package sectors

import (
	"encoding/json"
	"fmt"
)

const _DoorBehaviorName = "OpenOpeningClosingClosed"

var _DoorBehaviorIndex = [...]uint8{0, 4, 11, 18, 24}

func (i DoorBehavior) String() string {
	if i < 0 || i >= DoorBehavior(len(_DoorBehaviorIndex)-1) {
		return fmt.Sprintf("DoorBehavior(%d)", i)
	}
	return _DoorBehaviorName[_DoorBehaviorIndex[i]:_DoorBehaviorIndex[i+1]]
}

var _DoorBehaviorValues = []DoorBehavior{0, 1, 2, 3}

var _DoorBehaviorNameToValueMap = map[string]DoorBehavior{
	_DoorBehaviorName[0:4]:   0,
	_DoorBehaviorName[4:11]:  1,
	_DoorBehaviorName[11:18]: 2,
	_DoorBehaviorName[18:24]: 3,
}

// DoorBehaviorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DoorBehaviorString(s string) (DoorBehavior, error) {
	if val, ok := _DoorBehaviorNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DoorBehavior values", s)
}

// DoorBehaviorValues returns all values of the enum
func DoorBehaviorValues() []DoorBehavior {
	return _DoorBehaviorValues
}

// IsADoorBehavior returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DoorBehavior) IsADoorBehavior() bool {
	for _, v := range _DoorBehaviorValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DoorBehavior
func (i DoorBehavior) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DoorBehavior
func (i *DoorBehavior) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DoorBehavior should be a string, got %s", data)
	}

	var err error
	*i, err = DoorBehaviorString(s)
	return err
}
